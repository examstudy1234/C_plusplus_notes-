class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

# Create the doubly linked list
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    # Define the push method to add elements
    def push(self, new_val):
        new_node = Node(new_val)
        new_node.next = self.head
        if self.head is not None:
            self.head.prev = new_node
        self.head = new_node

    # Define the insert method to insert the element
    def insert(self, prev_node, new_val):
        if prev_node is None:
            return
        new_node = Node(new_val)
        new_node.next = prev_node.next
        prev_node.next = new_node
        new_node.prev = prev_node
        if new_node.next is not None:
            new_node.next.prev = new_node

    # Define the method to print the linked list
    def listprint(self, node):
        while node is not None:
            print(node.data, end=" ")
            last = node
            node = node.next

dllist = DoublyLinkedList()
dllist.push(12)
dllist.push(8)
dllist.push(62)
dllist.insert(dllist.head.next, 13)
dllist.listprint(dllist.head)